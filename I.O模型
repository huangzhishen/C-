静态库，动态库？什么时候用到
静态库，什么是静态库？静态库是作为链接器的输入的。
静态库出现的原因？
答：libc.a，libm.a，这些都是静态库，里面都是C内置的标准函数。
如果没有静态库，那么
1、编译器就要辨认出对标准函数的调用，并生成汇编代码（缺点：编译器将非常复杂；修改标准函数，编译器本身就得修改）
2、把所有的标准函数都放在一个可重定位目标文件.o文件（libc.o），用链接器连接一下。
（优点：解决了问题一，标准函数的实现与编译器的实现分开了）（缺点：libc.o占空间，运行时都要放进内存；标准函数的任何改变，都要重新编译一遍库的源文件）
3、那么我为每一个函数搞一个可重定位的目标函数（这样占空间就少了吧）
于是，静态库的概念出来了，
相关的函数分别被编译成独立的目标模块，然后总的封装成单独的静态库文件
链接器会智能的值复制被程序引用的目标模块。
其实静态库就是源代码编译后的.o文件，然后用AR工具打包成.a文件

Linux下，静态库以.a后缀，为存档文件，（就是把.o连起来，然后维护一个头部，记录每个.o的位置与大小）




exec系统调用负责启动加载器，



动态库是什么时候用到的呢？为什么需要动态库？
答；静态库不够好，加载到内存的时候，copy到代码段，数据段，需要占用内存。要想不占用内存，这时动态库就安排上了，动态库不需要嵌入到可执行文件中。

静态库通过链接器使用，
动态库通过动态链接器使用，linux中.so结尾，win是dll。
动态库还是在应用程序运行中，通过系统调用加载（dlopen）

利用-shared生成动态库，源代码在编译时要加上-fpic选项
链接器还是会复制一些重定位和符号表信息，使得运行时可以解析对动态库的代码与数据的引用。







程序执行的整个过程，预处理，编译，链接，执行
源程序.c>>>>预处理器.i（宏直接展开，头文件直接替换，过滤掉注释，常量替换）>>>编译器.s（变成汇编语言）
>>>汇编器.o（变成机器语言指令，并打包成.o二进制文件）>>>链接器（链接多个编译好的可重定位目标文件.o文件组成可执行文件）
